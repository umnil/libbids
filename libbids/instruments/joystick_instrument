import datetime
import csv
import json
from pathlib import Path
from typing import Any, Dict, List, Union
from controllerinput import joystick_controller
from .enums import Modality
from .read_instrument import ReadInstrument

class JoystickInstrument(ReadInstrument):
    def __init__(
        self,
        session: "Session",
        joystick_controller: Any,
        sampling_frequency: Union[int, List[int]],
        file_ext: str = "csv",
        **kwargs
    ):
        super().__init__(session, Modality.JOYSTICK, file_ext=file_ext)
        self.joystick_controller = joystick_controller
        self.sampling_frequency: List[int] = (
            [sampling_frequency] if isinstance(sampling_frequency, int) else sampling_frequency
        )
        self.metadata: Dict = self._process_metadata(kwargs)

    def start(self, task: str, run_id: str):
        super().start(task, run_id)
        # Initialize joystick controller and start data collection
        self.joystick_controller.start_update_process()

    def stop(self):
        super().stop()
        # Stop joystick data collection
        self.joystick_controller.stop_update_process()

    def read(self):
        # Read joystick data
        data = self.joystick_controller.get_data()

        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        filename = datetime.datetime.now().strftime("%Y-%m-%d") + ".csv"

        with open(filename, "a", newline='') as csvfile:
            fieldnames = ['Timestamp', 'Joystick Output']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

            # Write a row for each instance of joystick data
            for instance in data:
                writer.writerow({'Timestamp': timestamp, 'Joystick Output': json.dumps(instance)})
        def flush(self) -> None:
            """Read data from the device simply to discard"""
        self.device_read()

        return None 